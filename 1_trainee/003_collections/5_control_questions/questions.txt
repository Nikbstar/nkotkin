0. Расскажите иерархию интерфейсов Collection framework
    i Collections extends Iterable
    - i Set
    -- HashSet
    --- LinkedHashSet
    -- i SortedSet
    --- TreeSet
    - i Queue
    -- i Deque
    - i List
    -- ArrayList
    -- LinkedList
    i Map
    - i SortedMap
    -- TreeMap
    - AbstractMap
    -- HashMap
    ---LinkedHashMap

+0. Назовите основные методы интерфейса Collections
    !int size()
    !boolean isEmpty()
    !boolean contains(Object o)
    !Iterator<E> iterator()
    !Object[] toArray()
    !boolean add(E e)
    !boolean remove(Object o)
    boolean containsAll(Collection<?> c)
    boolean addAll(Collection<? extends E> c)
    boolean removeAll(Collection<?> c)
    boolean retainAll(Collection<?> c)
    !void clear()
    boolean equals(Object o)
    int hashCode()

+1. Что такое “коллекция”.
    Это хранилища, поддержиающие различные способы накопения и упорядочивания объектов
    с целью обеспечения возможностей эффективного доступа к ним.
    Это классы, объекты которых реализуют различные способы хранения данных.

+2. Назовите преимущества использования коллекций.
    - отсутствует необходимость следить за размерами коллекции (в отличае от массива)
    - в коллекциях реализовано много методов по добавлению, удалению, сортировке, которые позволяют сократить
        количество кода и требуют меньше усилий для реалезации
    - если правильно подобрать коллекцию то можно увеличить производительность программы.

+3. Какие данные могут хранить коллекции?
    Любые ссылочные типы данных.

+4. Какие есть типы коллекций? Как они характеризуются?
    Set - Множество. (Здесь могут храниться только уникальные значения, нет дубликатов)
    Queue (Deque) - Очередь. FIFO (Первый вошел, первый вышел). реализуется LinkedList'ом
    List - Упорядоченное хранение данных. (В какой последовательности данные положили, в такой они и хранятся)
    Map - (от Collection он не наследуется) Значения хранятся как пара - ключ-значение. и по ключу получаем значение.
        у мапы нету итератора

+5. Назовите основные реализации List, Set, Map.
    List: ArrayList, LinkedList
    Set: HashSet, LinkedHashSat, TreeSet
    Map: HashMap, LinkedHashMap, TreeMap

+6. В чём отличие ArrayList от LinkedList?
    ArrayList реализован на массивах. (используют если чаще читаются элементы, чем добавляются)
        Хранит свои элементы в массиве.
        +осуществляется быстрый поиск элементов.
        +меньше расхходует памятина хранение элементов
        -увеличение ArrayList'a происходит медленно.
        -при вставке элемента (или удалении) в середину или в начало, приходится переписывать все элементы.
    LinkedList является представителем двунаправленного списка. (цепочка) (используется если элементы чаще
            добавляются чем читаются)
        Хранит свои элементы в обектах у которых есть ссылки на предыдущий и следующий элементы.
        + быстрая вставка и удаление в середину списка (переписать next и prev и всё)
        -долгий поиск в середине (нужно перебрать все элементы)

+7. В чём отличие HashSet от TreeSet?
    HashSet хранит данные в произвольном порядке (хранит свои значения как ключи HashMap).
    TreeSet хранти данные в отсортированном виде (бинарное дерево).

+8. В чём отличие Set от Map?
    сет это список ключей от мапы.

+9. Как задается порядок следования объектов в коллекции, как отсортировать коллекцию?
    Порядок задается либо естественным следованием элементов (Natural order),
        либо объектом, реализующим интерфейс сравнения Comparator.
    Если объекты коллекции поддерживают интерфейс Comparable, то через Collections.sort(collection);
    Если нет, то у коллекции вызвать метод sort и передать ему Comparator в качестве аргумента.
    через Comparable или Comparator.

+10. Чем отличается Comparable от Comparator?
    Comparable - придает объектам какого то класса сравнимость
        (у каждого объекта есть метод compareTo, в который можно передать другой объект для сравнения).
        Collections.sort(collection);
    Comparator - треться сторона для сравнения
        (пишется отдельно и сравнивает два объекта данных ему.)
        collection.sort(new Comparator{});

+11. Что такое сортировка по принципу Natural Order?
    Некоторые классы из коробки реализуют естественный порядок для сортировки.
        Это строки - лексикографический (по алфавиту),
        числа - числовой, знаковый или без (больше меньше),
        дата - хронологичский (по датам),
        файл - лексикографический по имени пути
        boolean - false < true
    Остальные классы нужно руками делать Comparable или Comparator.

+12. Что такое equals и hashcode?
    Методы, необходимые для определения равенства объектов.
    hashcode возвращает число, являющееся уникальным идентификатором объекта.
        Это алгоритм, который позволяет множество значений объектов сузить до какого-то натурального количества.
    equals сравнивает объекты по значению их полей.
    Объекты всех коллекций в названии которых есть Hash... должны иметь hashcode и equals.

+13. Какие есть способы перебора всех элементов List?
    - через index (fori, while)
    - через iterator (while)
    - foreach

+14. Как реализован цикл foreach?
    Через iterator (Если коллекция экстендится от iterable, то мы можем перебирать элементы этой коллекции форичем)

+15. В чем разница между Iterator и ListIterator?
    - List может быть использован только для перебора коллекций List, iterator для любых.
    - Iterator идет только от начала до конца в одном направлении и может удалять
    ListIterator может двигаться как вперед так и назад.
    - Так же ListIterator может удалять, добавлять и перезаписывать элементы.

+16. Как происходит удаление элементов из ArrayList?
    Перекидывание элемента в конец массива путем смещения всех последующих элементов, а затем уменьшение поля size на 1.

+17. Как происходит удаление элементов из LinkedList?
    Замена ссылок prev и next у соседних элементов.